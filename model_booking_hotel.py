# -*- coding: utf-8 -*-
"""Model_Booking_Hotel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w57ReAg-7xSUYMZX8jQpKvaZeV3wT1NG
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, accuracy_score
import pickle

class HotelBookingModel:
    def __init__(self, model_type='xgboost'):
        self.model_type = model_type
        self.pipeline = None

    def load_data(self, path):
        df = pd.read_csv(path)
        df.drop("Booking_ID", axis=1, inplace=True)
        df["booking_status"] = df["booking_status"].map({"Not_Canceled": 0, "Canceled": 1})
        self.X = df.drop("booking_status", axis=1)
        self.y = df["booking_status"]
        self.cat_cols = self.X.select_dtypes(include=["object"]).columns.tolist()
        self.num_cols = self.X.select_dtypes(include=["int64", "float64"]).columns.tolist()

    def preprocess(self):
        self.preprocessor = ColumnTransformer([
            ("num", StandardScaler(), self.num_cols),
            ("cat", OneHotEncoder(handle_unknown="ignore"), self.cat_cols)
        ])

    def build_model(self):
        if self.model_type == 'randomforest':
            model = RandomForestClassifier(random_state=42)
        else:
            model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)

        self.pipeline = Pipeline([
            ("preprocessor", self.preprocessor),
            ("classifier", model)
        ])

    def train(self):
        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42, stratify=self.y)
        self.pipeline.fit(X_train, y_train)
        y_pred = self.pipeline.predict(X_test)
        print(f"{self.model_type.upper()} Report:\n", classification_report(y_test, y_pred))
        return self.pipeline

    def save_model(self, filename):
        with open(filename, "wb") as f:
            pickle.dump(self.pipeline, f)
        print(f"Model saved as {filename}")

if __name__ == '__main__':
    model = HotelBookingModel(model_type='xgboost')
    model.load_data("Dataset_B_hotel.csv")
    model.preprocess()
    model.build_model()
    trained_pipeline = model.train()
    model.save_model("best_model_pipeline.pkl")