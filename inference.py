# -*- coding: utf-8 -*-
"""inference

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I5jioxag4pSHe8ZPv6FaApzEZawnB-zz
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, accuracy_score
import pickle

class HotelBookingModel:
    def __init__(self, model_type='xgboost'):
        self.model_type = model_type
        self.pipeline = None

    def load_data(self, path):
        df = pd.read_csv(path)
        df.drop("Booking_ID", axis=1, inplace=True)
        df["booking_status"] = df["booking_status"].map({"Not_Canceled": 0, "Canceled": 1})
        self.X = df.drop("booking_status", axis=1)
        self.y = df["booking_status"]
        self.cat_cols = self.X.select_dtypes(include=["object"]).columns.tolist()
        self.num_cols = self.X.select_dtypes(include=["int64", "float64"]).columns.tolist()

    def preprocess(self):
        self.preprocessor = ColumnTransformer([
            ("num", StandardScaler(), self.num_cols),
            ("cat", OneHotEncoder(handle_unknown="ignore"), self.cat_cols)
        ])

    def build_model(self):
        if self.model_type == 'randomforest':
            model = RandomForestClassifier(random_state=42)
        else:
            model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)

        self.pipeline = Pipeline([
            ("preprocessor", self.preprocessor),
            ("classifier", model)
        ])

    def train(self):
        X_train, X_test, y_train, y_test = train_test_split(self.X, self.y, test_size=0.2, random_state=42, stratify=self.y)
        self.pipeline.fit(X_train, y_train)
        y_pred = self.pipeline.predict(X_test)
        print(f"{self.model_type.upper()} Report:\n", classification_report(y_test, y_pred))
        return self.pipeline

    def save_model(self, filename):
        with open(filename, "wb") as f:
            pickle.dump(self.pipeline, f)
        print(f"Model saved as {filename}")

class HotelBookingPredictor:
    def __init__(self, model_path):
        with open(model_path, "rb") as f:
            self.model = pickle.load(f)

    def predict(self, input_dict):
        df = pd.DataFrame([input_dict])
        prediction = self.model.predict(df)[0]
        proba = self.model.predict_proba(df)[0][int(prediction)]
        return prediction, proba

if __name__ == '__main__':
    model = HotelBookingModel(model_type='xgboost')
    model.load_data("Dataset_B_hotel.csv")
    model.preprocess()
    model.build_model()
    trained_pipeline = model.train()
    model.save_model("best_model_pipeline.pkl")

"""Testing Model"""

sample_input = {
        'no_of_adults': 2,
        'no_of_children': 0,
        'no_of_weekend_nights': 1,
        'no_of_week_nights': 3,
        'type_of_meal_plan': 'Meal Plan 1',
        'required_car_parking_space': 0,
        'room_type_reserved': 'Room_Type 1',
        'lead_time': 20,
        'arrival_year': 2023,
        'arrival_month': 5,
        'arrival_date': 15,
        'market_segment_type': 'Online',
        'repeated_guest': 0,
        'no_of_previous_cancellations': 0,
        'no_of_previous_bookings_not_canceled': 0,
        'avg_price_per_room': 100.0,
        'no_of_special_requests': 1
    }

predictor = HotelBookingPredictor("best_model_pipeline.pkl")
prediction, confidence = predictor.predict(sample_input)
status = "Canceled" if prediction == 1 else "Not Canceled"
print(f"Prediction: {status} with confidence {confidence:.2f}")

